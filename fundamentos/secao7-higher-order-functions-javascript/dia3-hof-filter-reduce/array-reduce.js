/* Imagine que vocÃª tenha ficado responsÃ¡vel por criar uma pÃ¡gina de carrinho de compras e para isso Ã© necessÃ¡rio realizar a soma de todos os itens do carrinho para retornar o valor final da compra.

O preÃ§o dos itens do carrinho estÃ£o dentro de um array e, para resolver esse problema, vocÃª pode utilizar o reduce, que Ã© responsÃ¡vel por passar por cada um dos valores, reduzindo o array a um Ãºnico valor, que nesse caso Ã© o valor total da compra.

Mas como o reduce funciona? ðŸ¤”

Diferente das outras HOFs, o reduce recebe dois parÃ¢metros: o primeiro Ã© uma callback, e o segundo parÃ¢metro Ã© um valor inicial (que Ã© opcional).

A sintaxe do reduce Ã© a seguinte: */

array.reduce(callback, valorInicial);

/* O valorInicial Ã© o valor da primeira iteraÃ§Ã£o e, em geral, ao realizar somas, esse valor Ã© 0.

JÃ¡ a callback Ã© a funÃ§Ã£o que vai passar por cada um dos itens do array, e ela pode receber atÃ© 4 parÃ¢metros, sendo eles:

Acumulador: que Ã© o valor que vai ser acumulado a cada iteraÃ§Ã£o;
Valor atual: que Ã© o valor atual do item, a ser adicionado no acumulador;
Index atual: que Ã© o index do item que estÃ¡ sendo iterado naquele momento;
Array: que Ã© o array original. */

array.reduce((acumulador, valorAtual, indexAtual, array) => { "cÃ³digo" }, valorInicial);

/* Os parÃ¢metros acumulador e valor atual em geral sÃ£o escritos em inglÃªs e abreviados. Sendo assim:

o acumulador Ã© chamado de acc (accumulator);
o valor atual Ã© chamado de curr (current value). 

Temos entÃ£o que acc, abreviatura de accumulator, ou acumulador, deve obrigatoriamente ser o primeiro parÃ¢metro da callback, e o curr, abreviatura de currentValue, ou valor atual, tambÃ©m obrigatÃ³rio, deve ser o segundo parÃ¢metro da callback. Sendo assim, para trabalhar com a funÃ§Ã£o reduce vocÃª deve ter algo parecido com o cÃ³digo abaixo:*/

array.reduce((acc, curr) => {
  // escopo de execuÃ§Ã£o da funÃ§Ã£o
}, valorInicial);

/* A funÃ§Ã£o do acumulador (acc) Ã© guardar o retorno da callback a cada iteraÃ§Ã£o, e a funÃ§Ã£o do curr Ã© acessar cada um dos valores do array.

O cÃ³digo abaixo possui um array simulando o valor dos itens no carrinho de compras e a funÃ§Ã£o do reduce para mostrar o que cada um dos parÃ¢metros retorna. Execute o cÃ³digo abaixo no console do seu navegador e veja o que ele retorna: */

const valorItens = [1, 32, 44, 2, 3];

valorItens.reduce((acc, curr) => {
  console.log(`acumulador - acc:`, acc);
  console.log(`valorAtual - curr:`, curr);
}, 0);

valorItens.reduce((acc, curr) => {
  console.log(`acc:`, acc);
  console.log(`curr:`, curr);
  console.log('a soma atual Ã©', acc + curr);

  return acc + curr;
}, 0);

// Veja tambÃ©m que, ao invÃ©s de passar a lÃ³gica direto dentro da callback do reduce, vocÃª pode criar uma funÃ§Ã£o externa e chamÃ¡-la como sendo o parÃ¢metro callback:

const numbers = [1, 32, 44, 2, 3];

const sumNumbers =  (acc, curr) => acc + curr;

const totalSum = numbers.reduce(sumNumbers, 30);

console.log(totalSum);

// Tente criar a funÃ§Ã£o que busca o maior valor do array numbers utilizando apenas o reduce.

const numbers1 = [50, 85, -30, 3, 15];

numbers1.reduce((acc, curr) => acc > curr ? acc : curr);

// Resolvendo em uma funÃ§Ã£o

const numbers2 = [50, 85, -30, 3, 15];

const highnumber = (acc, curr) => ((acc > curr) ? acc : curr);
const high = numbers2.reduce(highnumber);
console.log(high);

// Para fixar ainda mais o conceito de reduce, faÃ§a uma funÃ§Ã£o que some todos os nÃºmeros pares do array numbers:

const numbers3 = [18, 19, 23, 53, 4, 5, 76, 23, 54];

const evenValues = numbers3.filter((even) => even % 2 === 0);

const sumEvenValues = (acc, curr) => acc + curr;
const totalEvenValues = evenValues.reduce(sumEvenValues, 0);

console.log(totalEvenValues);

// Agora, crie uma funÃ§Ã£o usando dados de estudantes, para mostrar na tela um relatÃ³rio que diz em qual matÃ©ria a pessoa foi melhor. VocÃª usarÃ¡ tanto o map quanto o reduce dentro dele!

const estudantes = [
  {
    nome: 'Jorge',
    sobrenome: 'Silva',
    idade: 14,
    turno: 'ManhÃ£',
    materias: [
      { name: 'MatemÃ¡tica', nota: 67 },
      { name: 'PortuguÃªs', nota: 79 },
      { name: 'QuÃ­mica', nota: 70 },
      { name: 'Biologia', nota: 65 },
    ],
  },
  {
    nome: 'Mario',
    sobrenome: 'Ferreira',
    idade: 15,
    turno: 'Tarde',
    materias: [
      { name: 'MatemÃ¡tica', nota: 59 },
      { name: 'PortuguÃªs', nota: 80 },
      { name: 'QuÃ­mica', nota: 78 },
      { name: 'Biologia', nota: 92 },
    ],
  },
  {
    nome: 'Jorge',
    sobrenome: 'Santos',
    idade: 15,
    turno: 'ManhÃ£',
    materias: [
      { name: 'MatemÃ¡tica', nota: 76 },
      { name: 'PortuguÃªs', nota: 90 },
      { name: 'QuÃ­mica', nota: 70 },
      { name: 'Biologia', nota: 80 },
    ],
  },
  {
    nome: 'Maria',
    sobrenome: 'Silveira',
    idade: 14,
    turno: 'ManhÃ£',
    materias: [
      { name: 'MatemÃ¡tica', nota: 91 },
      { name: 'PortuguÃªs', nota: 85 },
      { name: 'QuÃ­mica', nota: 92 },
      { name: 'Biologia', nota: 90 },
    ],
  },
  {
    nome: 'Natalia',
    sobrenome: 'Castro',
    idade: 14,
    turno: 'ManhÃ£',
    materias: [
      { name: 'MatemÃ¡tica', nota: 70 },
      { name: 'PortuguÃªs', nota: 70 },
      { name: 'QuÃ­mica', nota: 60 },
      { name: 'Biologia', nota: 50 },
    ],
  },
  {
    nome: 'Wilson',
    sobrenome: 'Martins',
    idade: 14,
    turno: 'ManhÃ£',
    materias: [
      { name: 'MatemÃ¡tica', nota: 80 },
      { name: 'PortuguÃªs', nota: 82 },
      { name: 'QuÃ­mica', nota: 79 },
      { name: 'Biologia', nota: 75 },
    ],
  },
];

const melhorMateria = (acc, curr) => ((acc.nota > curr.nota) ? acc : curr);

const mapeando = estudantes.map((estudante) => ({
  nome: estudante.nome,
  materia: estudante.materias.reduce((acc, curr) => (acc.nota > curr.nota) ? acc : curr).name
}));

console.log(mapeando);